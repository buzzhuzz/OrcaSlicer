#!/bin/bash

export ROOT=$(echo $ROOT | grep . || pwd)
export NCORES=`nproc --all`

while getopts ":ih" opt; do
  case ${opt} in
    i )
        export BUILD_IMAGE="1"
        ;;
    h ) echo "Usage: ./BuildLinuxImage.sh [-i]"
        echo "   -i: Generate Appimage (optional)"
        exit 0
        ;;
  esac
done

echo -n "[9/9] Generating Linux app..."
#{
    # create directory and copy into it
    if [ -d "package" ]
    then
        rm -rf package/*
    fi
    mkdir -p package/bin

    # copy Resources
    cp -Rf ../resources package/resources
    cp -f src/@SLIC3R_APP_CMD@ package/bin/@SLIC3R_APP_CMD@
    # remove unneeded po from resources
    ## find package/resources/localization -name "*.po" -type f -delete ## FIXME: DD - do we need this?

    # Copy dynamic libraries
    HOST_DEPS=(
        libjpeg.so*
        libwebp.so*
        libwoff2dec.so*
        libwoff2common.so*
        libharfbuzz-icu.so*
        libsoup-2.4.so*
        libhyphen.so*
        libspnav.so*
        libatomic.so*
        webkit2gtk-4.*
        libicudata.so*
        libicui18n.so*
        libicuuc.so*
        libjavascriptcoregtk-4.*
        libwebkit2gtk-4.*
        libspnav.so*
    )

    mkdir -p package/lib/x86_64-linux-gnu
    for dep in "${HOST_DEPS[@]}"
    do
        libpath=$(ldd src/orca-slicer | awk "/${dep}/{print \$3}")
        cp -aL $libpath  package/lib/x86_64-linux-gnu/
    done

    # Copy webkit binaries we've built against.
    cp -aL /usr/lib/x86_64-linux-gnu/webkit2gtk-4.* package/lib/x86_64-linux-gnu/
    find package/lib/ -name 'libwebkit*' -type f -exec sed -i -e "s|/usr|././|g" '{}' \;

    # create bin
cat << EOF >@SLIC3R_APP_CMD@
#!/bin/bash
DIR=\$(readlink -f "\$0" | xargs dirname)
export LD_LIBRARY_PATH="\$DIR/bin:\$DIR/lib/x86_64-linux-gnu"

# FIXME: OrcaSlicer segfault workarounds
# 1) OrcaSlicer will segfault on systems where locale info is not as expected (i.e. Holo-ISO arch-based distro)
export LC_ALL=C

# WORKAROUND: change CWD to appimage root, so webkit would be
#             able to start itself using relative path
cd \$DIR

exec "\$DIR/bin/@SLIC3R_APP_CMD@" "\$@"
EOF

    chmod ug+x @SLIC3R_APP_CMD@
    cp -f @SLIC3R_APP_CMD@ package/@SLIC3R_APP_CMD@
    pushd package
    tar -cvf ../@SLIC3R_APP_KEY@.tar .  &>/dev/null
    popd
#} &> $ROOT/Build.log # Capture all command output
echo "done"

if [[ -n "$BUILD_IMAGE" ]]
then
echo -n "Creating Appimage for distribution..."
#{
    pushd package
    chmod +x ../build_appimage.sh
    ../build_appimage.sh
    popd
    mv package/"@SLIC3R_APP_KEY@_Linux_V@SoftFever_VERSION@.AppImage" "@SLIC3R_APP_KEY@_Linux_V@SoftFever_VERSION@.AppImage"
#} &> $ROOT/Build.log # Capture all command output
echo "done"
fi
